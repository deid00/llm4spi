[
   {
      "task_id": "HE108",
      "program-desc": "Write a function program_HE108 which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n\nExamples:\n    program_HE108([]) = 0\n    program_HE108([-1, 11, -11]) = 1\n    program_HE108([1, 1, 2]) = 3\n",
      "program": "def program_HE108(arr) :\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))",
      "pre_condition": "",
      "pre_condition_incomplete": "",
      "pre_condition_solution": "",
      "pre_condition_tests": "",
      "post_condition": "It checks that retval is equal to the number of elements x in arr (an array of int) \nsatisfying the following criterion:\n\n     the sum of the digits in x is > 0. However, if x is negative then its \n     first digit is first multiplied by -1 before we calculate the sum of the digits.\n\nExamples:\n   check_post_HE108(0,[]) = True\n   check_post_HE108(1,[-1, 11, -11]) = True\n   check_post_HE108(3,[1, 1, 2]) = True\n",
      "post_condition_incomplete": "def check_post_HE108(retval,arr) -> bool:",
      "post_condition_solution": "def check_post_solution_HE108(retval,arr) -> bool:\n    def mysum(x:int) -> int :\n        z = [ int(digit) for digit in str(abs(x)) ]\n        if x<0 :\n            z0 = z[0] * -1\n            z.pop(0)\n            z.append(z0)\n        return sum(z)\n    \n    return retval == len([x for x in arr if mysum(x)>0])      ",
      "post_condition_tests": "[[0,[]],[1,[-1, 11, -11]],[3,[1, 1, 2]],[2,[0,100,1]],[0,[-321, 0, -401]],[2,[13,-12,-622]],[3,[123,1]],[1,[18,-199]],[2,[0,-810211]]]\n"
   },
   {
      "task_id": "HE161",
      "program-desc": "You are given a string s.\nIf s[i] is a letter, reverse its case from lower to upper or vice versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\n\nExamples:\n  program_HE161(\"1234\") = \"4321\"\n  program_HE161(\"ab\") = \"AB\"\n  program_HE161(\"#a@C\") = \"#A@c\"\n",
      "program": "def program_HE161(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s",
      "pre_condition": "",
      "pre_condition_incomplete": "",
      "pre_condition_solution": "",
      "pre_condition_tests": "",
      "post_condition": "It checks that retval is the reverse of s, if s contains no letters. \nElse, it checks that retval is as s, but: \n  (1) for each s[i] which  is a lower case letter, retval[i] is the upper case, vice versa, \n  (2) and else retval[i] is as s[i].\n\nExamples:\n  check_post_P3(\"4321\",\"1234\") = True\n  check_post_P3(\"AB\",\"ab\") = True\n  check_post_P3(\"#A@c\",\"#a@C\") = True\n",
      "post_condition_incomplete": "def check_post_HE161(retval: str, s: str) -> bool:",
      "post_condition_solution": "def check_post_solution_HE161(retval: str, s: str) -> bool:\n  if all([ not c.isalpha() for c in s]):\n      return retval == s[::-1]\n  if len(retval) != len(s):\n      return False\n  return all([ (r == x.swapcase()) if x.isalpha() else (r==x) for (r,x) in zip(retval,s) ])",
      "post_condition_tests": "[[\"T3ST\",\"t3st\"],[\"1234\",\"4321\"],[\"AB\",\"ab\"],[\"#A@C\",\"#a@c\"],[\"tesT\",\"TESt\"],[\"TEStEST\",\"tesTest\"],[\"test\",\"test\"],[\"te\",\"TEST\"]]"
   },
   {
      "task_id": "HE99",
      "program-desc": "Create a function that takes a string input v representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n   program_HE99(\"10\") = 10\n   program_HE99(\"15.3\") = 15\n   program_HE99(\"14.5\") = 15\n   program_HE99(\"-14.5\") = -15\n\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example program_HE99(\"14.5\") should\nreturn 15 and program_HE99(\"-14.5\") should return -15.\n",
      "program": "def program_HE99(v:str) :\n\n    from math import floor, ceil\n\n    if v.count('.') == 1:\n        # remove trailing zeros\n        while (v[-1] == '0'):\n            v = v[:-1]\n\n    num = float(v)\n    if v[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(v) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res",
      "pre_condition": "It checks that the string v represents a number.",
      "pre_condition_incomplete": "def check_pre_HE99(v: str) -> bool:",
      "pre_condition_solution": "def check_pre_solution_HE99(v: str) -> bool:\n    try:\n        float(v)\n    except:\n        return False\n    return True",
      "pre_condition_tests": "[[\"\"],[\"10\"],[\"15.3\"],[\"-3.12542\"],[\"5.0.0\"],[\"test\"],[\"18-18\"]]",
      "post_condition": "It checks that retval is equal to the integer r closests to the nummeric value n\nrepresented by the string v.\nHowever, if n is equidistant from its two closest integers, retval should be \nequal to the integer obtained by rounding n away from zero\n\nExamples:\n   check_post_HE99(10,\"10\") = True\n   check_post_HE99(15,\"15.3\") = True\n   check_post_HE99(15,\"14.5\") = True\n   check_post_HE99(-15,\"-14.5\") = True\n",
      "post_condition_incomplete": "def check_post_HE99(retval: int, v: str) -> bool:",
      "post_condition_solution": "def check_post_solution_HE99(retval: int, v: str) -> bool:\n    from math import floor, ceil\n    x = float(v)\n    x0 = floor(x)\n    x1 = ceil(x)\n    r = round(x)\n    if abs(x - x0) != abs(x - x1):\n        return retval == r\n    else :\n        return retval == (x1 if x >= 0 else x0)",
      "post_condition_tests": "[[0,\"0\"],[10,\"10\"],[15,\"15.3\"],[15,\"14.5\"],[8,\"8.50\"],[-15,\"-14.5\"],[-3,\"-3.12542\"],[0,\"0.10000\"],[16,\"15.3\"],[14,\"14.5\"],[-4,\"-3.12542\"]]"
   },
   {
      "task_id": "P0",
      "program-desc": "The program takes x and y that are non-negative, and it returns the greatest of x and y. \n\nExamples:\n  maxp(0,0) = 0 \n  maxp(9,1) = 9 \n  maxp(9,10) = 10\n",
      "program": "def program_P0(x: float, y: float) -> float: \n  return max(x,y)",
      "pre_condition": "It checks if x and y are non-negative.",
      "pre_condition_incomplete": "def check_pre_P0(x: float, y: float) -> bool: ",
      "pre_condition_solution": "def check_pre_solution_P0(x: float, y: float) -> bool: \n    return x>=0 and y>=0",
      "pre_condition_tests": "[[0,0],[9,1],[9,10],[-1,1],[5,0],[1,-1],[-9,-9]]",
      "post_condition": "It checks if retval is the greatest of x and y.",
      "post_condition_incomplete": "def check_post_P0(retval: float, x: float, y: float) -> bool:",
      "post_condition_solution": "def check_post_solution_P0(retval: float, x: float, y: float) -> bool:\n    return (retval==x or retval==y) and retval >=x and retval >= y",
      "post_condition_tests": "[[0,0,0],[9,9,1],[10,9,10],[1,1,1],[0,3,1],[3,5,3],[0,1,1]]"
   }
]