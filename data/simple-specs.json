[
    {
        "task_id": "arith_0", 
        "pre_condition": 
        "It checks that y is at least x.",
        "pre_condition_incomplete": 
        "def check_pre_arith_0(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_0(x: float, y: float) -> bool: return y >= x",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0]]"
    },
    {
        "task_id": "arith_1", 
        "pre_condition": 
        "It checks that y is not equal to x.",
        "pre_condition_incomplete": 
        "def check_pre_arith_1(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_1(x: float, y: float) -> bool: return x != y",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0]]"
    },
    {
        "task_id": "arith_2", 
        "pre_condition": 
        "It checks that the product of x and y is non-negative.",
        "pre_condition_incomplete": 
        "def check_pre_arith_2(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_2(x: float, y: float) -> bool: return x * y >= 0",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0],[1,1],[1,0],[2,3]]"
    },
    {
        "task_id": "arith_3", 
        "pre_condition": 
        "It checks that the sum of x and y is zero or equal to z.",
        "pre_condition_incomplete": 
        "def check_pre_arith_3(x: float, y: float, z: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_3(x: float, y: float, z: float) -> bool: return (x+y == 0) or (x+y==z)",
        "pre_condition_tests": "[[-9,1,-8],[-9,9,1],[0,1,0],[1,1,3],[1,0,1],[0,0,0]]"
    },
    {
        "task_id": "logic_0", 
        "pre_condition": 
        "It checks that x is non-negative, if y is positive.",
        "pre_condition_incomplete": 
        "def check_pre_logic_0(x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_0(x: int, y: int) -> bool: return x>=0 if y>0 else True",
        "pre_condition_tests": "[[-9,1],[9,1],[0,0],[1,-1]]"
    },
    {
        "task_id": "logic_1", 
        "pre_condition": 
        "It checks that if is is even, then y is also even.",
        "pre_condition_incomplete": 
        "def check_pre_logic_1(x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_1(x: int, y: int) -> bool: return y%2==0 if x%2==0 else True",
        "pre_condition_tests": "[[-9,1],[2,3],[2,4],[-2,4],[0,0]]"
    },
    {
        "task_id": "logic_2", 
        "pre_condition": 
        "It checks that if either x or y is None, then r is also None.\n Else, if y is 0, the program checks that r in None.\n In other cases, the program checks that r is equal to the reminder of x divided by y.",
        "pre_condition_incomplete": 
        "def check_pre_logic_2(r:int, x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_2(r:int, x: int, y: int) -> bool: return r==None if x==None or y==None else (r==None if y==0 else r == x%y)  ",
        "pre_condition_tests": "[[None,1,None],[None,None,3],[None,4,0],[0,4,2],[0,4,1],[1,4,3],[-2,4,3],[None,5,2],[0,5,3],[1,4,-3]]"
    }
]