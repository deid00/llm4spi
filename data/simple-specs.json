[
    {
        "task_id": "arith_0", 
        "pre_condition": 
        "It checks that y is at least x.",
        "pre_condition_incomplete": 
        "def check_pre_arith_0(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_0(x: float, y: float) -> bool: return y >= x",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0]]"
    },
    {
        "task_id": "arith_1", 
        "pre_condition": 
        "It checks that y is not equal to x.",
        "pre_condition_incomplete": 
        "def check_pre_arith_1(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_1(x: float, y: float) -> bool: return x != y",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0]]"
    },
    {
        "task_id": "arith_2", 
        "pre_condition": 
        "It checks that the product of x and y is non-negative.",
        "pre_condition_incomplete": 
        "def check_pre_arith_2(x: float, y: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_2(x: float, y: float) -> bool: return x * y >= 0",
        "pre_condition_tests": "[[-9,1],[-9,-10],[0,0],[1,1],[1,0],[2,3]]"
    },
    {
        "task_id": "arith_3", 
        "pre_condition": 
        "It checks that the sum of x and y is zero or equal to z.",
        "pre_condition_incomplete": 
        "def check_pre_arith_3(x: float, y: float, z: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_3(x: float, y: float, z: float) -> bool: return (x+y == 0) or (x+y==z)",
        "pre_condition_tests": "[[-9,1,-8],[-9,9,1],[0,1,0],[1,1,3],[1,0,1],[0,0,0]]"
    },
    {
        "task_id": "arith_4", 
        "pre_condition": 
        "It checks that either of the following is true: (1) the sum of x,y,z is larger than their product, if none of x,y,z are zero.\nElse (2), the sum is a positive number.",
        "pre_condition_incomplete": 
        "def check_pre_arith_4(x: int, y: int, z: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_4(x: int, y: int, z: int) -> bool: return x+y+z > x*y*z if x!=0 and y!=0 and z!=0 else x+y+z>0",
        "pre_condition_tests": "[[3,1,1],[4,2,1],[3,2,2],[1,-1,1],[1,0,1],[1,0,-1]]"
    },
    {
        "task_id": "arith_5", 
        "pre_condition": 
        "It checks that all of the following hold: (1) x,y,z are all positve.\n(2) x+y > z\n(3) and similarly for x+z and y+z.",
        "pre_condition_incomplete": 
        "def check_pre_arith_5(x: float, y: float, z: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_5(x: float, y: float, z: float) -> bool: return x>0 and y>0 and z>0 and x+y>z and x+z>y and y+z>x",
        "pre_condition_tests": "[[1,3.1,2],[2,2,2],[4,4,0.01],[1,3,2],[4,-1,4],[1,0,3]]"
    },
    {
        "task_id": "arith_6", 
        "pre_condition": 
        "It checks that x,y,z are all positive and furthermore one of these hold:\n(1) x is divisible by y and z,\n(2) y is divisible by x and z,\n(3) or similarly with z.",
        "pre_condition_incomplete": 
        "def check_pre_arith_6(x: int, y: int, z: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_6(x: int, y: int, z: int) -> bool:\n    return x>0 and y>0 and z>0 and ((x % y == 0 and x % z == 0) or (y % x == 0 and y % z == 0) or (z % x == 0 and z % y == 0))",
        "pre_condition_tests": "[[4,2,1],[21,7,3],[7,3,21],[3,6,2],[4,0,1],[-4,2,1],[3,9,2]]"
    },
    {
        "task_id": "arith_7", 
        "pre_condition": 
        "It checks that none of x,y,z is zero nor negative and furthermore no number between 2 and z (inclusive) is a divisor of either x nor y.",
        "pre_condition_incomplete": 
        "def check_pre_arith_7(x: int, y: int, z: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_7(x: int, y: int, z: int) -> bool:\n    return x>0 and y>0 and z>0 and all([ x % v !=0 and y % v != 0 for v in range(2,z+1)])",
        "pre_condition_tests": "[[7,11,5],[7,25,4],[7,-1,5],[7,3,0],[7,9,3],[8,13,3],[2,7,3]]"
    },
    {
        "task_id": "arith_8", 
        "pre_condition": 
        "It checks whether the pair-wise difference between x,y,z is at most epsilon, where epsilon is 0.001",
        "pre_condition_incomplete": 
        "def check_pre_arith_8(x: float, y: float, z: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_8(x: float, y: float, z: float) -> bool:\n       e = 0.001\n       return abs(x-y)<=e and abs(y-z)<=e and abs(x-z)<=e",
        "pre_condition_tests": "[[1,1.001,1],[0.999,1,1],[1.0005,1,0.9995],[0,0,0],[1,-1,1],[1.01,1,1],[1.002,1.001,1]]"
    },
    {
        "task_id": "arith_9", 
        "pre_condition": 
        "It checks whether the element-wise product of (a,b,c) and (x,y,z) is in the range of [0..1].",
        "pre_condition_incomplete": 
        "def check_pre_arith_9(x: float, y: float, z: float, a: float, b: float, c: float) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_arith_9(x: float, y: float, z: float, a: float, b: float, c: float) -> bool: return 0 <= a*x <= 1 and 0 <= b*y <= 1 and 0 <= c*z <= 1",
        "pre_condition_tests": "[[1,1,1,0,1,0],[1,1,1,0.01,1,0.001],[10,0,0.1,0.01,100,10],[1,1,1,-1,1,0],[1,1.1,1,0,1,0]]"
    },
    {
        "task_id": "logic_0", 
        "pre_condition": 
        "It checks that x is non-negative, if y is positive.",
        "pre_condition_incomplete": 
        "def check_pre_logic_0(x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_0(x: int, y: int) -> bool: return x>=0 if y>0 else True",
        "pre_condition_tests": "[[-9,1],[9,1],[0,0],[1,-1]]"
    },
    {
        "task_id": "logic_1", 
        "pre_condition": 
        "It checks that if is is even, then y is also even.",
        "pre_condition_incomplete": 
        "def check_pre_logic_1(x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_1(x: int, y: int) -> bool: return y%2==0 if x%2==0 else True",
        "pre_condition_tests": "[[-9,1],[2,3],[2,4],[-2,4],[0,0]]"
    },
    {
        "task_id": "logic_2", 
        "pre_condition": 
        "It checks that if either x or y is None, then r is also None.\n Else, if y is 0, the program checks that r in None.\n In other cases, the program checks that r is equal to the reminder of x divided by y.",
        "pre_condition_incomplete": 
        "def check_pre_logic_2(r:int, x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_2(r:int, x: int, y: int) -> bool: return r==None if x==None or y==None else (r==None if y==0 else r == x%y)  ",
        "pre_condition_tests": "[[None,1,None],[None,None,3],[None,4,0],[0,4,2],[0,4,1],[1,4,3],[-2,4,3],[None,5,2],[0,5,3],[1,4,-3]]"
    },
    {
        "task_id": "logic_3", 
        "pre_condition": 
        "It checks that r is equivalent to either x implies y or y implies x",
        "pre_condition_incomplete": 
        "def check_pre_logic_3(r: bool, x: bool, y: bool) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_3(r: bool, x: bool, y: bool) -> bool: return r == ((not x or y) or (not y or x))",
        "pre_condition_tests": "[[True,True,True],[True,False,False],[False,False,True],[True,True,False],[False,False,False]]"
    },
    {
        "task_id": "logic_4", 
        "pre_condition": 
        "It checks that all these conditions hold:\n(1) none of the parameters are \"None\",\n(2) the parameters should not all be false,\n(3) if z is true, so are x and y.",
        "pre_condition_incomplete": 
        "def check_pre_logic_4(z: bool, x: bool, y: bool) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_4(z: bool, x: bool, y: bool) -> bool: return x != None and y != None and z != None and not(not x and not y and not z) and ((x and y) if z else True)",
        "pre_condition_tests": "[[True,True,True],[True,False,False],[False,False,True],[True,True,False],[False,False,False],[False,None,False],[None,True,True]]"
    },
    {
        "task_id": "logic_5", 
        "pre_condition": 
        "It checks that one of these conditions hold:\n(1) z in \"None\",\n(2) x,\n(3) if z is true, the sum of x,y is larger than their product,\n(4) else, x+y should be less than their product.",
        "pre_condition_incomplete": 
        "def check_pre_logic_5(z: bool, x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_5(z: bool, x: int, y: int) -> bool: return (z == None) or (x+y > x*y if z else x+y < x*y)",
        "pre_condition_tests": "[[None,0,0],[True,3,1],[False,3,-1],[True,3,2],[True,0,0],[False,-3,-1]]"
    },
    {
        "task_id": "logic_6", 
        "pre_condition": 
        "It checks that one of these conditions hold:\n(1) z is \"None\",\n(2) x,\n(3) if z is true, the sum of x,y is larger than their product,\n(4) else, x+y should be less than their product.",
        "pre_condition_incomplete": 
        "def check_pre_logic_6(z: bool, x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_6(z: bool, x: int, y: int) -> bool: return (z == None) or (x+y > x*y if z else x+y < x*y)",
        "pre_condition_tests": "[[None,0,0],[True,3,1],[False,3,-1],[True,3,2],[True,0,0],[False,-3,-1]]"
    },
    {
        "task_id": "logic_7", 
        "pre_condition": 
        "It checks that z is equivalent to whether x is divisible by y, except when y is either 0 or None, then z should be None.",
        "pre_condition_incomplete": 
        "def check_pre_logic_7(z: bool, x: int, y: int) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_7(z: bool, x: int, y: int) -> bool: return (z == None) if (y==0 or y==None) else z == (x % y ==0)",
        "pre_condition_tests": "[[None,3,0],[None,3,None],[False,3,2],[True,6,-2],[True,6,5],[False,-6,1],[True,9,0],[False,9,None]]"
    },
    {
        "task_id": "logic_8", 
        "pre_condition": 
        "It checks that none of the parameters is \"None\", and furthermore that one of these hold:\n(1) x implies p,\n(2) x implies q,\n(3) p==q.\n  ",
        "pre_condition_incomplete": 
        "def check_pre_logic_8(x:bool, p:bool, q:bool) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_8(x:bool, p:bool, q:bool) -> bool: return (x!=None) and (p!=None) and (q!=None) and ((not x or p) or (not x or q) or (p==q))",
        "pre_condition_tests": "[[True,True,False],[True,False,True],[False,False,False],[True,True,True],[True,None,True],[None,True,True]]"
    },
    {
        "task_id": "logic_9", 
        "pre_condition": 
        "It checks whether p implies q, except when x is false, then it checks whether p is equivalent to q.",
        "pre_condition_incomplete": 
        "def check_pre_logic_9(x:bool, p:bool, q:bool) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_logic_9(x:bool, p:bool, q:bool) -> bool: return (not p or q) if x else (p==q)",
        "pre_condition_tests": "[[True,True,True],[False,True,True],[False,False,False],[True,False,True],[False,True,False]]"
    },
    {
        "task_id": "quantifier_0", 
        "pre_condition": 
        "It checks that all elements of s are non-negative integers.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_0(s:list[int]) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_0(s:list[int]) -> bool: return all([ x>=0 for x in s])",
        "pre_condition_tests": "[ [[]], [[0]], [[-1,0]], [[9,9,0]], [[9,9,-1]] ]"
    },
    {
        "task_id": "quantifier_1", 
        "pre_condition": 
        "It checks that there exists an element of s that is also an element of t",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_1(s:list, t:list) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_1(s:list, t:list) -> bool: return any([ x in t for x in s])",
        "pre_condition_tests": "[ [[],[]], [[],[1,2,3]], [[1],[]], [[1],[3,2,1]], [[[]], [[],[],[]]], [[\"foo\"], [\"foobar\"]]]"
    },
    {
        "task_id": "quantifier_2", 
        "pre_condition": 
        "It checks that the value of r is equivalent to whether s contains an even integer.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_2(r:bool, s:list[int]) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_2(r:bool, s:list[int]) -> bool: return r == any([ x%2 == 0 for x in s])",
        "pre_condition_tests": "[ [False,[]], [True,[0]], [True,[-1,0]], [True,[-2,99]], [False,[1,99]], [True,[]], [True,[-1]], [False,[-2,0,4]] ]"
    },
    {
        "task_id": "quantifier_3", 
        "pre_condition": 
        "It checks that every element of r is also an element of s, and that every element of s is also an element of r.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_3(r:list, s:list) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_3(r:list, s:list) -> bool: return all([ x in s for x in r]) and  all([ x in r for x in s])",
        "pre_condition_tests": "[ [[],[]], [[1,1],[1]], [[2,2,0],[0,0,2,2]], [[1,2],[2,2]] ]"
    },
    {
        "task_id": "quantifier_4", 
        "pre_condition": 
        "It checks that these conditions hold:\n(1) if x is an element of s, then r is non-empty,\n(2) every element of r is a valid index of the list s,\n(3) for every k in r, s[k]==x.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_4(r:list, s:list, x) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_4(r:list, s:list, x) -> bool: return (len(r)>0 if x in s else True) and all([(0<= k < len(s) and s[k]==x) for k in r])",
        "pre_condition_tests": "[ [[1,3],[1,9,1,9],9],  [[],[1,9],3], [[0,1,2],[3,3,3],3], [[0,1,3],[1,9,1,9],9], [[3],[1,9],3], [[1],[1,9],1]]"
    },
    {
        "task_id": "quantifier_5", 
        "pre_condition": 
        "It checks that these hold:\n(1) s is at least as long as r,\n(2) for every element x of r, x is equal to the corresponding element y in s (at the same index), or equal to -y.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_5(r:list[int], s:list[int]) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_5(r:list[int], s:list[int]) -> bool: return len(s) >= len(r) and all([ abs(r[k]) == abs(s[k]) for k in range(0,len(r))])",
        "pre_condition_tests": "[[[],[]], [[],[1]], [[1,-2,3],[1,2,-3]], [[1,-2],[1,2,3]], [[1,2],[1]], [[2,1],[1,2]], [[1,2],[3,-1]] ]"
    },
    {
        "task_id": "quantifier_6", 
        "pre_condition": 
        "It checks that no element of s occurs more than twice.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_6(s:list) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_6(s:list) -> bool: return all([ len([1 for y in s if y==x]) <= 2 for x in s ])",
        "pre_condition_tests": "[ [[]], [[1,2,3]], [[1,1]], [[1,2,3,1]], [[0,1,2,1,2,1]] , [[1,2,3,3,3]] ]"
    },
    {
        "task_id": "quantifier_7", 
        "pre_condition": 
        "It checks that r has an element that occurs in the other lists.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_7(r:list, s:list, t:list) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_7(r:list, s:list, t:list) -> bool: return any([ (x in s and x in t) for x in r ])",
        "pre_condition_tests": "[ [[1],[2,1],[3,2,1]], [[3,1],[2,1],[3,2,1]], [[],[],[]], [[],[1],[1]], [[1],[2],[3,3]] ]"
    },
    {
        "task_id": "quantifier_8", 
        "pre_condition": 
        "It checks that every value s[i] of the input list s, is equal to s[i-1]*2.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_8(s:list[int]) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_8(s:list[int]) -> bool: return all([ s[k] == 2* s[k-1] for k in range(1,len(s)) ])",
        "pre_condition_tests": "[ [[]], [[1]], [[0,0]], [[3,6]], [[1,2,4,8]], [[1,1]], [[3,6,9]] ]"
    },
    {
        "task_id": "quantifier_9", 
        "pre_condition": 
        "It checks whether r has an element x that occurs in s with the same index. s is assumed to be at least as long as r.",
        "pre_condition_incomplete": 
        "def check_pre_quantifier_9(r:list, s:list) -> bool:",
        "pre_condition_solution": 
        "def check_pre_solution_quantifier_9(r:list, s:list) -> bool: return len(s) < len(r) or any([r[i] == s[i] for i in range(0,len(r))])",
        "pre_condition_tests": "[ [[3,1],[4,1,2,3]], [[1,1,3,1], [0,2,3,0]] , [[2,1], [1,1,3]], [[],[]], [[2,1],[1,2]], [[1],[2,1]], [[1,1],[0,0,1]] ]"
    }
]