[
    {
        "task_id": "0", 
        "program": "def maxp(x: float, y: float) -> float: \n\"\"\" \nThe program takes x and y that are non-negative, and it returns the greatest of x and y. \n \n>>> maxp(0,0) \n0 \n>>> maxp(9,1) \n1 \n>>> maxp(9,10) \n10 \n\"\"\" \nreturn max(x,y)", 
        "pre_condition": "x and y are non-negative.",
        "pre_condition_incomplete": "def checkPre(x: float, y: float) -> bool:\n    \"\"\"\n    Return true if x and y are non-negative.\n    \"\"\"",
        "pre_condition_solution": "return x>=0 and y>=0",
        "pre_condition_tests": [[-1,1],[5,10]], 
        "post_condition": "The program returns the greatest of x and y.",
        "post_condition_incomplete": "def checkPost(retval: float, x: float, y: float) -> bool:\n    \"\"\"\n    Return true if retval is the greatest of x and y.\n    \"\"\"\n",
        "post_condition_solution": "return (retval==x or retval==y) and retval >=x and retval >= y",
        "post_condition_tests": [[5,3,5],[0,3,1]] 
    },
    {
        "task_id": "1",
        "program": "def minp(x: int, y: int) -> int:\n    \"\"\"\n    The program takes x and y, and returns the smallest of x and y.\n\n    >>> min(0,0)\n    0\n    >>> min(9,1)\n    1\n    >>> min(9,10)\n    9 \n    \"\"\"\n    return min(x,y)",
        "pre_condition": "",
        "pre_condition_incomplete": "def checkPre(x: int, y: int) -> bool:\n    \"\"\"\n    Return true.\n    \"\"\"",
        "pre_condition_solution": "return True",
        "pre_condition_tests": [[-1,0],[100,10]],
        "post_condition": "The program returns the smallest of x and y.",
        "post_condition_incomplete": "def checkPost(retval: int, x: int, y: int) -> bool:\n    \"\"\"\n    Return true if retval is the smallest of x and y.\n    \"\"\"\n",
        "post_condition_solution": "return (retval==x or retval==y) and retval <=x and retval <= y",
        "post_condition_tests": [[5,3,5],[1,1,1]] 
    },
    {
        "task_id": "2",
        "program": "def getMin(a) -> int:\n    \"\"\"\n    The program takes a non-null and non-empty integer list a, and returns the smallest element of list a.\n    \n    >>> getMin([1,2,3,4])\n    1\n    >>> getMin([5,5,5])\n    5\n    >>> getMin([5,4])\n    4\n    \"\"\"\n    return min(a)",
        "pre_condition": "a is non-null and non-empty",
        "pre_condition_incomplete": "def checkPre(a) -> bool:\n    \"\"\"\n    Return true if a is non-null and non-empty\n    \"\"\"",
        "pre_condition_solution": "return a != None and len(a) > 0",
        "pre_condition_tests": [[[]],[[1,2]]],
        "post_condition": "The program returns the smallest element of a.",
        "post_condition_incomplete": "def checkPost(retval: int, a) -> bool:\n    \"\"\"\n    Return true if retval is the smallest element of a.\n    \"\"\"\n",
        "post_condition_solution": "return (retval in a) and all(retval <= i for i in a)",
        "post_condition_tests": [[1,[4,5,1]],[5,[4,5,1]]]
    },
    {
        "task_id": "3",
        "program": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
        "pre_condition": "s is a non-empty string",
        "pre_condition_incomplete": "def checkPre(s: str) -> bool:",
        "pre_condition_solution": "return len(s) > 0",
        "pre_condition_tests": [[""],["t3st"]],
        "post_condition": "if s[i], retval should equal s, but with the case of each letter reversed and if s contains no letters, retval should equal s but in reverse order.",
        "post_condition_incomplete": "def checkPost(retval: str, s: str) -> bool:",
        "post_condition_solution": "flg = 0\nidx = 0\nnew_str = list(s)\nfor i in s:\n    if i.isalpha():\n        new_str[idx] = i.swapcase()\n        flg = 1\n    idx += 1\ns = \"\"\nfor i in new_str:\n    s += i\nif flg == 0:\n    return retval == s[len(s)::-1]\nreturn retval == s\n",
        "post_condition_tests": [["1234","4321"],["tesT","TESt"],["TEStEST","tesTest"],["test","test"]]
    },
    {
        "task_id": "4",
        "program": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
        "pre_condition": "s is a non-empty string and must represent a number",
        "pre_condition_incomplete": "def checkPre(value: str) -> bool:",
        "pre_condition_solution": "try:\n    float(s)\nexcept:\n    return False\nreturn True",
        "pre_condition_tests": [["-3.12542"],["5.0.0"],["test"],["18-18"]],
        "post_condition": "retval must equal the integer closest to the number that s represents. If the number is equidistant from two integers, retval must equal the integer of the two that is farthest from zero.",
        "post_condition_incomplete": "def checkPost(retval: int, value: str) -> bool:",
        "post_condition_solution": "from math import floor, ceil\n\nif value.count('.') == 1:\n    # remove trailing zeros\n    while (value[-1] == '0'):\n        value = value[:-1]\n\nnum = float(value)\nif value[-2:] == '.5':\n    if num > 0:\n        res = ceil(num)\n    else:\n        res = floor(num)\nelif len(value) > 0:\n    res = int(round(num))\nelse:\n    res = 0\n\nreturn retval == res\n",
        "post_condition_tests": [[-10,"-9.5"],[0,"0.10000"],[8,"8.50"]] 
    },
    {
        "task_id": "5",
        "program": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
        "pre_condition": "arr is not empty",
        "pre_condition_incomplete": "from typing import List\ndef checkPre(arr: List[int]) -> bool:",
        "pre_condition_solution": "return len(arr) > 0",
        "pre_condition_tests": [[[]],[[1,23,456]]],
        "post_condition": "retval is equal to the number of integers in arr that have a sum of digits greater than zero.",
        "post_condition_incomplete": "from typing import List\ndef checkPost(retval: int, arr: List[int]) -> bool:",
        "post_condition_solution": "def digits_sum(n):\n    neg = 1\n    if n < 0: n, neg = -1 * n, -1 \n    n = [int(i) for i in str(n)]\n    n[0] = n[0] * neg\n    return sum(n)\nreturn retval == len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
        "post_condition_tests": [[0,[-321, 0, -401]],[2,[13,-12,-622]],[1,[18,-199]],[2,[0,-810211]]]
    },
    {
        "task_id": "6",
        "program": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
        "pre_condition": "s must be a string containing letters only",
        "pre_condition_incomplete": "def checkPre(s: str) -> bool:",
        "pre_condition_solution": "return s.isalpha()",
        "pre_condition_tests": [["123abc"],["AbCDeFGG"],["a-bcdef+"],[""]],
        "post_condition": "retval is True when s is longer than 3 letters and is a string where all consecutive 4 letters are distinct",
        "post_condition_incomplete":"def checkPost(retval: bool, s: str) -> bool:",
        "post_condition_solution": "if len(s) < 3:\n    return retval == False\n\nfor i in range(len(s) - 2):\n    if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return retval == False\nreturn retval == True\n",
        "post_condition_tests": [[false, "aaabcd"],[true, "bdfhjlbdhf"],[true, "abcdaba"],[false,"abcabcabc"]]
    },
    {
        "task_id": "7",
        "program": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
        "pre_condition": "always return true",
        "pre_condition_incomplete": "def checkPre(a:int, h:int) -> bool:",
        "pre_condition_solution": "return True",
        "pre_condition_tests": [[5,5],[0,1000]],
        "post_condition": "retval must equal the area of a triangle with height h and a side that has length a.",
        "post_condition_incomplete": "def checkPost(retval: float, a: int, h: int) -> bool:",
        "post_condition_solution": "return retval == a * h / 2.0",
        "post_condition_tests": [[24.5,7,7],[1,12,3]]
    },
    {
        "task_id": "8",
        "program": "\ndef is_nested(s):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n",
        "pre_condition": "s is a string that only consists of square brackets.",
        "pre_condition_incomplete": "def checkPre(s: str) -> bool:",
        "pre_condition_solution": "for l in s:\n    if (l != '[') & (l != ']'):\n        return False\nreturn True",
        "pre_condition_tests": [["[[[[["],[""],["aaabcd"],["[][]"]],
        "post_condition": "retval is only True when there is a nested pair of [] in s",
        "post_condition_incomplete":"def checkPost(retval: bool, s: str) -> bool:",
        "post_condition_solution": "opening_bracket_index = []\nclosing_bracket_index = []\nfor i in range(len(s)):\n    if s[i] == '[':\n        opening_bracket_index.append(i)\n    else:\n        closing_bracket_index.append(i)\nclosing_bracket_index.reverse()\ncnt = 0\ni = 0\nl = len(closing_bracket_index)\nfor idx in opening_bracket_index:\n    if i < l and idx < closing_bracket_index[i]:\n        cnt += 1\n        i += 1\nreturn cnt >= 2",
        "post_condition_tests": [[true,"[[[[[[[[[[]]"],[false,"[][[[[[[[[]"],[true,"[][][[[]"],[false,"[[[[[][[][]"]]

    },
    {
        "task_id": "9",
        "program": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
        "pre_condition": "always return True",
        "pre_condition_incomplete": "def checkPre(n: int) -> bool:",
        "pre_condition_solution": "return True",
        "pre_condition_tests": [[2],[0],[-8]],
        "post_condition": "retval is equal to the largest number that divides n evenly, smaller than n",
        "post_condition_incomplete": "def checkPost(retval: int, n: int) -> bool:",
        "post_condition_solution": "for i in reversed(range(n)):\n    if n % i == 0:\n        return retval == i",
        "post_condition_tests": [[7,49],[2,32]]
    }
]