[
    {
        "task_id": "0", 
        "program": "def maxp(x: float, y: float) -> float: \n\"\"\" \nThe program takes x and y that are non-negative, and it returns the greatest of x and y. \n \n>>> maxp(0,0) \n0 \n>>> maxp(9,1) \n1 \n>>> maxp(9,10) \n10 \n\"\"\" \nreturn max(x,y)", 
        "pre_condition": "x and y are non-negative.",
        "pre_condition_incomplete": "def check_pre_completion_0(x: float, y: float) -> bool:\n    \"\"\"\n    Return true if x and y are non-negative.\n    \"\"\"",
        "pre_condition_solution": "def check_pre_solution_0(x: float, y: float) -> bool:\n    \"\"\"\n    Return true if x and y are non-negative.\n    \"\"\"\n    return x>=0 and y>=0",
        "pre_condition_tests": [[-1,1],[5,10]], 
        "post_condition": "The program returns the greatest of x and y.",
        "post_condition_incomplete": "def check_post_completion_0(retval: float, x: float, y: float) -> bool:\n    \"\"\"\n    Return true if retval is the greatest of x and y.\n    \"\"\"\n",
        "post_condition_solution": "def check_post_solution_0(retval: float, x: float, y: float) -> bool:\n    \"\"\"\n    Return true if retval is the greatest of x and y.\n    \"\"\"\n\n    return (retval==x or retval==y) and retval >=x and retval >= y",
        "post_condition_tests": [[5,3,5],[0,3,1]] 
    },
    {
        "task_id": "1",
        "program": "def minp(x: int, y: int) -> int:\n    \"\"\"\n    The program takes x and y, and returns the smallest of x and y.\n\n    >>> min(0,0)\n    0\n    >>> min(9,1)\n    1\n    >>> min(9,10)\n    9 \n    \"\"\"\n    return min(x,y)",
        "pre_condition": "",
        "pre_condition_incomplete": "def check_pre_completion_1(x: int, y: int) -> bool:\n    \"\"\"\n    Return true.\n    \"\"\"",
        "pre_condition_solution": "def check_pre_solution_1(x: int, y: int) -> bool:\n    \"\"\"\n    Return true.\n    \"\"\"\n    return True",
        "pre_condition_tests": [[-1,0],[100,10]],
        "post_condition": "The program returns the smallest of x and y.",
        "post_condition_incomplete": "def check_post_completion_1(retval: int, x: int, y: int) -> bool:\n    \"\"\"\n    Return true if retval is the smallest of x and y.\n    \"\"\"\n",
        "post_condition_solution": "def check_post_solution_1(retval: int, x: int, y: int) -> bool:\n    \"\"\"\n    Return true if retval is the smallest of x and y.\n    \"\"\"\n\n    return (retval==x or retval==y) and retval <=x and retval <= y",
        "post_condition_tests": [[5,3,5],[1,1,1]] 
    }
]